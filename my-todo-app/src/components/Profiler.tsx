import React, { Profiler as ReactProfiler, useLayoutEffect, useEffect, useRef } from "react";

interface ProfilerProps {
	id: string;
	children: React.ReactNode;
	onProfileUpdate?: (steps: string[]) => void;
}

const Profiler: React.FC<ProfilerProps> = ({ id, children, onProfileUpdate }) => {
	const stepsRef = useRef<string[]>([]);

	// ðŸŒŸ Track Render Phase
	const handleRender = (id: string, phase: "mount" | "update", actualDuration: number) => {
		stepsRef.current.push(`ðŸŒ€ [Render Phase]`);
		stepsRef.current.push(`   â”œâ”€ Component <${id}> ${phase === "mount" ? "Mounted" : "Updated"}`);
		stepsRef.current.push(`   â”œâ”€ Virtual DOM is created`);
		stepsRef.current.push(`   â”œâ”€ React performs Diffing`);
		stepsRef.current.push(`   â”œâ”€ Render completed in ${actualDuration.toFixed(2)}ms`);
		onProfileUpdate?.([...stepsRef.current]);
	};

	// ðŸŒŸ Track Layout Effect Phase
	useLayoutEffect(() => {
		stepsRef.current.push(`ðŸ“Œ [Layout Effect Phase]`);
		stepsRef.current.push(`   â”œâ”€ Runs BEFORE browser paints UI`);
		stepsRef.current.push(`   â””â”€ Can manipulate DOM before user sees changes`);
		onProfileUpdate?.([...stepsRef.current]);
	});

	// ðŸŒŸ Track Commit Phase (DOM Update & Effects)
	useEffect(() => {
		stepsRef.current.push(`âœ… [Commit Phase]`);
		stepsRef.current.push(`   â”œâ”€ React updates Real DOM`);
		stepsRef.current.push(`   â”œâ”€ Browser paints UI`);
		stepsRef.current.push(`   â””â”€ Component is now interactive`);
		onProfileUpdate?.([...stepsRef.current]);
	});

	return (
		<ReactProfiler id={id} onRender={handleRender}>
			{children}
		</ReactProfiler>
	);
};

export default Profiler;
